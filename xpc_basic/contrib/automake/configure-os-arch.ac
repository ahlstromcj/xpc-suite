#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.
# File generated by autoscan, and then manually edited by
# Andrew Miller<ak.miller@auckland.ac.nz>

# This file is Copyright (C) 2005 by the Bioengineering Institute at the
# University of Auckland.
# Other portions are borrowed from Mozilla.
# 
# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is the modification of xpcorba for use with mozCellML
# The Initial Developer of the Original Code is
# The Bioengineering Institute, University of Auckland.
# Portions created by the Initial Developer are Copyright (C) 2005
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#   Andrew Miller <ak.miller@auckland.ac.nz> (original developer)
#
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the "GPL"), or
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****

AC_PREREQ(2.59)
AC_INIT(mozCellML, mozCellML, ak.miller@auckland.ac.nz)
AC_CANONICAL_TARGET

AM_INIT_AUTOMAKE

W32API_VERSION=2.4
CCOFLAG=-o 
LDOFLAG=-o

dnl ========================================================
dnl =
dnl = Dont change the following two lines.  Doing so breaks:
dnl =
dnl = CFLAGS="-foo" ./configure
dnl =
dnl ========================================================
CFLAGS="${CFLAGS=}"
CPPFLAGS="${CPPFLAGS=}"
CXXFLAGS="${CXXFLAGS=}"
LDFLAGS="${LDFLAGS=}"

MKSHLIB='${CXX} ${CXXFLAGS} -shared -o $@ '
MKEXECUTABLE='${CXX} ${CXXFLAGS} -o $@ '

dnl Default to MSVC for win32
dnl ==============================================================
if test -z "$CROSS_COMPILE"; then
case "$target" in
*-cygwin*|*-mingw*|*-msvc*|*-mks*)
    if test -z "$CC"; then CC=cl; fi
    if test -z "$CXX"; then CXX=cl; fi
    if test -z "$LD"; then LD=link; fi
    if test -z "$AS"; then AS=ml; fi
    ;;
default)
    LD='$(CXX)'
    ;;
esac
fi

AC_PROG_CC
AC_PROG_CXX
AC_PROG_CPP
AC_PROG_CXXCPP

dnl ========================================================
dnl Checks for compilers.
dnl ========================================================
dnl Set CROSS_COMPILE in the environment when running configure
dnl to use the cross-compile setup for now
dnl ========================================================
if test -n "$CROSS_COMPILE" && test "$target" != "$host"; then
    echo "cross compiling from $host to $target"
    cross_compiling=yes

    _SAVE_CC="$CC"
    _SAVE_CFLAGS="$CFLAGS"
    _SAVE_LDFLAGS="$LDFLAGS"

    AC_MSG_CHECKING([for host c compiler])
    AC_CHECK_PROGS(HOST_CC, $HOST_CC gcc cc /usr/ucb/cc cl icc, "")
    if test -z "$HOST_CC"; then
        AC_MSG_ERROR([no acceptable c compiler found in \$PATH])
    fi
    AC_MSG_RESULT([$HOST_CC])
    AC_MSG_CHECKING([for host c++ compiler])
    AC_CHECK_PROGS(HOST_CXX, $HOST_CXX $CCC c++ g++ gcc CC cxx cc++ cl icc, "")
    if test -z "$HOST_CXX"; then
        AC_MSG_ERROR([no acceptable c++ compiler found in \$PATH])
    fi
    AC_MSG_RESULT([$HOST_CXX])

    if test -z "$HOST_CFLAGS"; then
        HOST_CFLAGS="$CFLAGS"
    fi
    if test -z "$HOST_CXXFLAGS"; then
        HOST_CXXFLAGS="$CXXFLAGS"
    fi
    if test -z "$HOST_LDFLAGS"; then
        HOST_LDFLAGS="$LDFLAGS"
    fi
    AC_CHECK_PROGS(HOST_RANLIB, $HOST_RANLIB ranlib, ranlib, :)
    AC_CHECK_PROGS(HOST_AR, $HOST_AR ar, ar, :)
    CC="$HOST_CC"
    CFLAGS="$HOST_CFLAGS"
    LDFLAGS="$HOST_LDFLAGS"

    AC_MSG_CHECKING([whether the host c compiler ($HOST_CC $HOST_CFLAGS $HOST_LDFLAGS) works])
    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[return(0);]])],
	[ac_cv_prog_hostcc_works=1 AC_MSG_RESULT([yes])],
	AC_MSG_ERROR([installation or configuration problem: host compiler $HOST_CC cannot create executables.]) )

    CC="$HOST_CXX"
    CFLAGS="$HOST_CXXFLAGS"

    AC_MSG_CHECKING([whether the host c++ compiler ($HOST_CXX $HOST_CXXFLAGS $HOST_LDFLAGS) works])
    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[return(0);]])], 
	[ac_cv_prog_hostcxx_works=1 AC_MSG_RESULT([yes])],
	AC_MSG_ERROR([installation or configuration problem: host compiler $HOST_CXX cannot create executables.]) )
    
    CC=$_SAVE_CC
    CFLAGS=$_SAVE_CFLAGS
    LDFLAGS=$_SAVE_LDFLAGS

    AC_CHECK_PROGS(CC, $CC "${target_alias}-gcc" "${target}-gcc", :)
    unset ac_cv_prog_CC
    AC_CHECK_PROGS(CXX, $CXX "${target_alias}-g++" "${target}-g++", :)
    unset ac_cv_prog_CXX
    AC_CHECK_PROGS(RANLIB, $RANLIB "${target_alias}-ranlib" "${target}-ranlib", :)
    AC_CHECK_PROGS(AR, $AR "${target_alias}-ar" "${target}-ar", :)
    AC_CHECK_PROGS(LD, $LD "${target_alias}-ld" "${target}-ld", :)
    AC_CHECK_PROGS(STRIP, $STRIP "${target_alias}-strip" "${target}-strip", :)
else
    AC_PROG_RANLIB
    AC_CHECK_PROGS(AR, ar, :)
    AC_CHECK_PROGS(LD, ld, :)
    AC_CHECK_PROGS(STRIP, strip, :)
    if test -z "$HOST_CC"; then
        HOST_CC="$CC"
    fi
    if test -z "$HOST_CFLAGS"; then
        HOST_CFLAGS="$CFLAGS"
    fi
    if test -z "$HOST_CXX"; then
        HOST_CXX="$CXX"
    fi
    if test -z "$HOST_CXXFLAGS"; then
        HOST_CXXFLAGS="$CXXFLAGS"
    fi
    if test -z "$HOST_LDFLAGS"; then
        HOST_LDFLAGS="$LDFLAGS"
    fi
    if test -z "$HOST_RANLIB"; then
        HOST_RANLIB="$RANLIB"
    fi
    if test -z "$HOST_AR"; then
       HOST_AR="$AR"
    fi
fi

GNU_AS=
GNU_LD=
GNU_CC=
GNU_CXX=
CC_VERSION='N/A'
CXX_VERSION='N/A'
if test "$GCC" = "yes"; then
    GNU_CC=1
    CC_VERSION=`$CC -v 2>&1 | grep 'gcc version'`
fi
if test "$GXX" = "yes"; then
    GNU_CXX=1
    CXX_VERSION=`$CXX -v 2>&1 | grep 'gcc version'`
fi
if test "`echo | $AS -v 2>&1 | grep -c GNU`" != "0"; then
    GNU_AS=1
fi
if test "`echo | $LD -v 2>&1 | grep -c GNU`" != "0"; then
    GNU_LD=1
fi

MISC_CXXFLAGS=

if test "$GNU_CC"; then
    if `$CC -print-prog-name=ld` -v 2>&1 | grep -c GNU >/dev/null; then
        GCC_USE_GNU_LD=1
    fi
    MISC_CXXFLAGS="-Wno-ctor-dtor-privacy -fshort-wchar"
fi

CYGWIN_WRAPPER=

dnl ========================================================
dnl Use cygwin wrapper for win32 builds
dnl ========================================================
case "$host_os" in
mingw*|cygwin*|msvc*|mks*)
    _pwd=`pwd`
    CYGWIN_WRAPPER="${_pwd}/cygwin-wrapper "
    HOST_CC="$CYGWIN_WRAPPER $HOST_CC"
    HOST_CXX="$CYGWIN_WRAPPER $HOST_CXX"
    CC="$CYGWIN_WRAPPER $CC"
    CXX="$CYGWIN_WRAPPER $CXX"
    CPP="$CYGWIN_WRAPPER $CPP"
    LD="$CYGWIN_WRAPPER $LD"
    ;;
esac

dnl Special win32 checks
dnl ========================================================
case "$target" in
*-cygwin*|*-mingw*|*-msvc*|*-mks*)
    if test "$GCC" != "yes"; then
        # Check to see if we are really running in a msvc environemnt
        _WIN32_MSVC=1

        # Make sure compilers are valid
        MISC_CXXFLAGS="$CXXFLAGS -GX -TP -nologo -MD"
	CXXFLAGS="$MISC_CXXFLAGS"
        AC_LANG_PUSH(C)
        AC_COMPILE_IFELSE(
            [ AC_LANG_PROGRAM([[#include <stdio.h>]], [[printf("Hello World\n");]]) ],,
            AC_MSG_ERROR([\$(CC) test failed.  You must have MS VC++ in your path to build.]) )
        AC_LANG_POP(C)

        AC_LANG_PUSH(C++)
        AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <new.h>]],[[ unsigned *test = new unsigned(42); ]])],,
            AC_MSG_ERROR([\$(CXX) test failed.  You must have MS VC++ in your path to build.]) )
        AC_LANG_POP(C++)

        # Determine compiler version
        CC_VERSION=`${CC} -v 2>&1 | grep Version | sed -e 's|.* Version ||' -e 's| .*||'`
        _CC_MAJOR_VERSION=`echo ${CC_VERSION} | sed -e 's|\..*||'`

        CXX_VERSION=`${CXX} -v 2>&1 | grep Version | sed -e 's|.* Version ||' -e 's| .*||'`
        _CXX_MAJOR_VERSION=`echo ${CXX_VERSION} | sed -e 's|\..*||'`

        if test "$_CC_MAJOR_VERSION" != "$_CXX_MAJOR_VERSION"; then
            AC_MSG_ERROR([The major versions of \$CC and \$CXX do not match.])
        fi
        if test "$_CC_MAJOR_VERSION" = "12"; then
            _CC_SUITE=6
        elif test "$_CC_MAJOR_VERSION" = "13"; then
            _CC_SUITE=7
        else
            AC_MSG_ERROR([This version of the MSVC compiler, $CC_VERSION , is unsupported.])
        fi

        INCREMENTAL_LINKER=1
    else
        # Check w32api version
        _W32API_MAJOR_VERSION=`echo $W32API_VERSION | sed -e 's|\..*||'`
        _W32API_MINOR_VERSION=`echo $W32API_VERSION | sed -e 's|\..*||'`
        AC_MSG_CHECKING([for w32api version >= $W32API_VERSION])
        AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <w32api.h>]], [[
            #if (__W32API_MAJOR_VERSION < $_W32API_MAJOR_VERSION) || \
                (__W32API_MAJOR_VERSION == $_W32API_MAJOR_VERSION && \
                 __W32API_MINOR_VERSION < $_W32API_MINOR_VERSION)
                #error "test failed."
            #endif
            ]])], [ res=yes ], [ res=no ])
        AC_MSG_RESULT([$res])
        if test "$res" != "yes"; then
            AC_MSG_ERROR([w32api version $W32API_VERSION or higher required.])
        fi
    fi # !GNU_CC
    ;;
esac

if test -n "$_WIN32_MSVC"; then
    SKIP_PATH_CHECKS=1
    SKIP_COMPILER_CHECKS=1
    SKIP_LIBRARY_CHECKS=1
    AC_CHECK_HEADERS(mmintrin.h)
fi

dnl Test breaks icc on OS/2 && MSVC
if test "$CC" != "icc" -a -z "$_WIN32_MSVC"; then
    AC_PROG_CC_C_O
    if grep "NO_MINUS_C_MINUS_O 1" ./confdefs.h >/dev/null; then
        USING_HCC=1
        _OLDCC=$CC
        _OLDCXX=$CXX
        CC="${srcdir}/build/hcc '$CC'"
        CXX="${srcdir}/build/hcpp '$CXX'"
    fi
fi

AC_SUBST(GNU_AS)
AC_SUBST(GNU_LD)
AC_SUBST(GNU_CC)
AC_SUBST(GNU_CXX)

AC_PROG_LN_S


dnl ========================================================
dnl set the defaults first
dnl ========================================================
AR_FLAGS='cr $@'
AR_LIST='$(AR) t'
AR_EXTRACT='$(AR) x'
AR_DELETE='$(AR) d'
DLL_PREFIX=lib
LIB_PREFIX=lib
DLL_SUFFIX=.so
OBJ_SUFFIX=o
LIB_SUFFIX=a
ASM_SUFFIX=s
HOST_CFLAGS="${HOST_CFLAGS=}"
HOST_CXXFLAGS="${HOST_CXXFLAGS=}"
HOST_LDFLAGS="${HOST_LDFLAGS=}"
IMPORT_LIB_SUFFIX=

if test "$OS_ARCH" = "WIN95"; then
    OS_ARCH=WINNT
    OS_TARGET=WIN95
elif test "$OS_ARCH" = 'Windows_95'; then
    OS_ARCH=Windows_NT
    OS_TARGET=WIN95
elif test "$OS_ARCH" = 'Windows_98'; then
    OS_ARCH=Windows_NT
    OS_TARGET=WIN95
elif test "`echo $OS_ARCH | egrep -c '^(CYGWIN_9|CYGWIN_ME)' 2>/dev/null`" != 0; then
    OS_ARCH='CYGWIN_NT-4.0'
    OS_TARGET=WIN95
elif test "$OS_ARCH" = "OS_2"; then
    OS_ARCH=OS2
    OS_TARGET=OS2
fi

#
# On WIN32, we also define the variable CPU_ARCH.
#

if test "$OS_ARCH" = "WINNT"; then
    CPU_ARCH=`uname -p`
    if test "$CPU_ARCH" = "I386"; then
        CPU_ARCH=x86
    fi
elif test "$OS_ARCH" = "Windows_NT"; then
#
# If uname -s returns "Windows_NT", we assume that we are using
# the uname.exe in MKS toolkit.
#
# The -r option of MKS uname only returns the major version number.
# So we need to use its -v option to get the minor version number.
# Moreover, it doesn't have the -p option, so we need to use uname -m.
#
    OS_ARCH=WINNT
    OS_TARGET=WINNT
    OS_MINOR_RELEASE=`uname -v`
    if test "$OS_MINOR_RELEASE" = "00"; then
        OS_MINOR_RELEASE=0
    fi
    OS_RELEASE="${OS_RELEASE}.${OS_MINOR_RELEASE}"
    CPU_ARCH=`uname -m`
    #
    # MKS's uname -m returns "586" on a Pentium machine.
    #
    if echo "$CPU_ARCH" | grep -c 86 >/dev/null; then
        CPU_ARCH=x86
    fi
elif echo "$OS_ARCH" | grep -c CYGWIN_NT >/dev/null; then
#
# If uname -s returns "CYGWIN_NT-4.0", we assume that we are using
# the uname.exe in the Cygwin tools.
#
    OS_RELEASE=`echo $OS_ARCH | sed 's|^CYGWIN_NT-||'`
    OS_ARCH=WINNT
    OS_TARGET=WINNT
    CPU_ARCH=`uname -m`
    #
    # Cygwin's uname -m returns "i686" on a Pentium Pro machine.
    #
    if echo "$CPU_ARCH" | grep -c 86 >/dev/null; then
        CPU_ARCH=x86
    fi
elif test "$OS_ARCH" = "CYGWIN32_NT"; then
#
# Prior to the Beta 20 release, Cygwin was called GNU-Win32.
# If uname -s returns "CYGWIN32/NT", we assume that we are using
# the uname.exe in the GNU-Win32 tools.
#
    OS_ARCH=WINNT
    OS_TARGET=WINNT
    CPU_ARCH=`uname -m`
    #
    # GNU-Win32's uname -m returns "i686" on a Pentium Pro machine.
    #
    if echo "$CPU_ARCH" | grep -c 86 >/dev/null; then
        CPU_ARCH=x86
    fi
fi

if test -z "$OS_TARGET"; then
    OS_TARGET=$OS_ARCH
fi
if test "$OS_TARGET" = "WIN95"; then
    OS_RELEASE="4.0"
fi
if test "$OS_TARGET" = "WIN16"; then
    OS_RELEASE=
fi
OS_CONFIG="${OS_TARGET}${OS_RELEASE}"

dnl ========================================================
dnl System overrides of the defaults for host
dnl ========================================================
case "$host" in
*-beos*)
    HOST_CFLAGS="$HOST_CFLAGS -DXP_BEOS -DBeOS -DBEOS -D_POSIX_SOURCE -DNO_X11"
    HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O3}"
    PLATFORM_DEFINE="-D__beos__ -DXP_BEOS"
    ;;

*cygwin*|*mingw*|*mks*|*msvc*)
    if test -n "$_WIN32_MSVC"; then
        HOST_CFLAGS="$HOST_CFLAGS -TC -nologo"
    else
        HOST_CFLAGS="$HOST_CFLAGS -mno-cygwin"
    fi
    HOST_CFLAGS="$HOST_CFLAGS -DXP_WIN32 -DXP_WIN -DWIN32 -D_WIN32 -DNO_X11"
    HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O2}"
    HOST_BIN_SUFFIX=.exe
    PLATFORM_DEFINE="-D__WIN32__ -DXP_WIN -DXP_WIN32"
    ;;

*-darwin*)
    HOST_CFLAGS="$HOST_CFLAGS -DXP_UNIX -DXP_MACOSX -DNO_X11"
    HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O3}"
    PLATFORM_DEFINE="-D__darwin__ -DXP_DARWIN"
    ;;

*-linux*)
    HOST_CFLAGS="$HOST_CFLAGS -DXP_UNIX"
    HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O3}"
    PLATFORM_DEFINE="-D__linux__ -DXP_LINUX"
    ;;

*os2*)
    HOST_CFLAGS="$HOST_CFLAGS -DXP_OS2 -DNO_X11"
    HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O2}"
    HOST_BIN_SUFFIX=.exe
    PLATFORM_DEFINE="-D__os2__ -DXP_OS2"
    ;;

*-osf*)
    HOST_CFLAGS="$HOST_CFLAGS -DXP_UNIX"
    HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O2}"
    PLATFORM_DEFINE="-D__osf1__ -DXP_OSF1"
    ;;

*)
    HOST_CFLAGS="$HOST_CFLAGS -DXP_UNIX"
    HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O2}"
    case "$host" in
    *-arm*)
	PLATFORM_DEFINE="-D__arm__ -DXP_ARM"
	;;
    *-atmos*)
	PLATFORM_DEFINE="-D__atmos__ -DXP_ATMOS"
	;;
    *-aix*)
	PLATFORM_DEFINE="-D__aix__ -DXP_AIX"
	;;
    *-nextstep*)
	PLATFORM_DEFINE="-D__nextstep__ -DXP_NEXTSTEP"
	;;
    *-VMS*)
	PLATFORM_DEFINE="-D__VMS__ -DXP_VMS"
	;;
    *-SINIX*)
	PLATFORM_DEFINE="-D__SINIX__ -DXP_SINIX"
	;;
    *-osr5*)
	PLATFORM_DEFINE="-D__osr5__ -DXP_OSR5"
	;;
    *-uw7*)
	PLATFORM_DEFINE="-D__uw7__ -DXP_UW7"
	;;
    *-irix*)
	PLATFORM_DEFINE="-D__irix__ -DXP_IRIX"
	;;
    *-freebsd*)
	PLATFORM_DEFINE="-D__freebsd__ -DXP_FREEBSD"
	;;
    *-netbsd*)
	PLATFORM_DEFINE="-D__netbsd__ -DXP_NETBSD"
	;;
    *-openbsd*)
	PLATFORM_DEFINE="-D__openbsd__ -DXP_OPENBSD"
	;;
    *-rtems*)
	PLATFORM_DEFINE="-D__rtems__ -DXP_RTEMS"
	;;
    *-masos*)
	PLATFORM_DEFINE="-D__macos__ -DXP_MACOS"
	;;
    *-sunos*)
	PLATFORM_DEFINE="-D__sunos__ -DXP_SUNOS"
	;;
    *-vxWorks*)
	PLATFORM_DEFINE="-D__vxWorks__ -DXP_VXWORKS"
	;;
    *-hpux*)
	PLATFORM_DEFINE="-D__hpux__ -DXP_HPUX"
	;;
    esac
    ;;
esac

dnl ========================================================
dnl System overrides of the defaults for target
dnl ========================================================
case "$target" in
*-aix*)
    if test ! "$GNU_CC"; then
        if test ! "$HAVE_64BIT_OS"; then
            # Compiling with Visual Age C++ object model compat is the
            # default. To compile with object model ibm, add 
            # AIX_OBJMODEL=ibm to .mozconfig.
            if test "$AIX_OBJMODEL" = "ibm"; then
                CXXFLAGS="$CXXFLAGS -qobjmodel=ibm"
            else
                AIX_OBJMODEL=compat
            fi
        else
            AIX_OBJMODEL=compat
        fi
        AC_SUBST(AIX_OBJMODEL)
        DSO_LDOPTS='-qmkshrobj=1'
        DSO_CFLAGS='-qflag=w:w'
        DSO_PIC_CFLAGS=
        LDFLAGS="$LDFLAGS -Wl,-brtl -blibpath:/usr/lib:/lib"
        MKSHLIB='$(CXX) $(DSO_LDOPTS) -o $@'
        MKCSHLIB='$(CC) $(DSO_LDOPTS) -o $@'
        AC_LANG_PUSH(C++)
        AC_MSG_CHECKING([for VisualAge C++ compiler version >= 5.0.2.0])
        AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]],
            [[#if (__IBMCPP__ < 502)
             #error "Bad compiler"
             #endif]])],
            _BAD_COMPILER=,_BAD_COMPILER=1)
        if test -n "$_BAD_COMPILER"; then
            AC_MSG_RESULT([no])    
            AC_MSG_ERROR([VisualAge C++ version 5.0.2.0 or higher is required to build.])
        else
            AC_MSG_RESULT([yes])    
        fi
        AC_LANG_POP(C++)
        CC_VERSION=`lslpp -Lcq vac.C 2>/dev/null | awk -F: '{ print $3 }'`
        CXX_VERSION=`lslpp -Lcq vacpp.cmp.core 2>/dev/null | awk -F: '{ print $3 }'`
    fi
    case "${target_os}" in
    aix4.1*)
        DLL_SUFFIX='_shr.a'
        ;;
    esac
    AC_CHECK_HEADERS(sys/inttypes.h)
    ;;

*-beos*)
    no_x=yes
    MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_LDOPTS) -o $@'
    DSO_LDOPTS='-nostart -Wl,-h -Wl,$@'
    TK_LIBS='-lbe -lroot'
    LIBS="$LIBS -lbe"
    AC_CHECK_LIB(bind,main,LIBS="$LIBS -lbind")
    _WARNINGS_CFLAGS="${_WARNINGS_CFLAGS} -Wno-multichar"
    _WARNINGS_CXXFLAGS="${_WARNINGS_CXXFLAGS} -Wno-multichar"
    ;;

*-bsdi*)
    dnl -pedantic doesn't play well with BSDI's _very_ modified gcc (shlicc2)
    _PEDANTIC=
    _IGNORE_LONG_LONG_WARNINGS=
    case $OS_RELEASE in
	4.*|5.*)
            STRIP="$STRIP -d"
            ;;
	*)
	    DSO_CFLAGS=''
	    DSO_LDOPTS='-r'
	    _WARNINGS_CFLAGS="-Wall"
	    _WARNINGS_CXXFLAGS="-Wall"
	    # The test above doesn't work properly, at least on 3.1.
	    MKSHLIB_FORCE_ALL=''
	    MKSHLIB_UNFORCE_ALL=''
	;;
    esac
    ;;

*-darwin*) 
    _PEDANTIC=
    CFLAGS="$CFLAGS -fpascal-strings -no-cpp-precomp -fno-common"
    CXXFLAGS="$CXXFLAGS -fpascal-strings -no-cpp-precomp -fno-common"
    DLL_SUFFIX=".dylib"
    DSO_LDOPTS=''
    STRIP="$STRIP -x -S"
    case "${target_cpu}" in
    powerpc*)
        DSO_LDOPTS="$DSO_LDOPTS -arch ppc"
        MACOSX=1
        ;;
    esac
    ;;

*-freebsd*)
    if test `test -x /usr/bin/objformat && /usr/bin/objformat || echo aout` != "elf"; then
	DLL_SUFFIX=".so.1.0"
	DSO_LDOPTS="-shared"
    fi
    if test ! "$GNU_CC"; then
	DSO_LDOPTS="-Bshareable $DSO_LDOPTS"
    fi
# Can't have force w/o an unforce.
#    # Hack for FreeBSD 2.2
#    if test -z "$MKSHLIB_FORCE_ALL"; then
#	MKSHLIB_FORCE_ALL='-Wl,-Bforcearchive'
#	MKSHLIB_UNFORCE_ALL=''
#    fi
    ;; 

*-hpux*)
    DLL_SUFFIX=".sl"
    if test ! "$GNU_CC"; then
    	DSO_LDOPTS='-b -Wl,+s -L$(DIST)/bin'
    	DSO_CFLAGS=""
    	DSO_PIC_CFLAGS="+Z"
    	MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_LDOPTS) -o $@'
    	MKCSHLIB='$(LD) -b +s -L$(DIST)/bin -o $@'
        CXXFLAGS="$CXXFLAGS -Wc,-ansi_for_scope,on"
    else
    	DSO_LDOPTS='-b -E +s -L$(DIST)/bin -L$(DIST)/lib'
    	MKSHLIB='$(LD) $(DSO_LDOPTS) -o $@'
    	MKCSHLIB='$(LD) $(DSO_LDOPTS) -o $@'
    fi
    ;;

*-irix5*)
    DSO_LDOPTS='-elf -shared'
    if test "$GNU_CC"; then
       MKSHLIB_FORCE_ALL='-Wl,-all'
       MKSHLIB_UNFORCE_ALL='-Wl,-none'
       CXXFLAGS="$CXXFLAGS -D_LANGUAGE_C_PLUS_PLUS"
    else
       MKSHLIB_FORCE_ALL='-all'
       MKSHLIB_UNFORCE_ALL='-none'
    fi
    ;;

*-irix6*)
    dnl the irix specific xptcinvoke code is written against the n32 ABI so we *must* 
    dnl compile and link using -n32
    USE_N32=1
    DSO_LDOPTS='-elf -shared'
    MKSHLIB='$(CCC) $(CXXFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -o $@'
    MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -o $@'
    if test "$GNU_CC"; then
       MKSHLIB_FORCE_ALL='-Wl,-all'
       MKSHLIB_UNFORCE_ALL='-Wl,-none'
       _WARNINGS_CFLAGS="-Wall"
       _WARNINGS_CXXFLAGS="-Wall"
       CXXFLAGS="$CXXFLAGS -D_LANGUAGE_C_PLUS_PLUS"
    else
       MKSHLIB_FORCE_ALL='-all'
       MKSHLIB_UNFORCE_ALL='-none'
	   AR_LIST="$AR t"
	   AR_EXTRACT="$AR x"
	   AR_DELETE="$AR d"
	   AR='$(CXX) -ar'
	   AR_FLAGS='-o $@'
       CFLAGS="$CFLAGS -woff 3262 -G 4"
       CXXFLAGS="$CXXFLAGS -woff 3262 -G 4"
       if test -n "$USE_N32"; then
	   ASFLAGS="$ASFLAGS -n32"
	   CFLAGS="$CFLAGS -n32"
	   CXXFLAGS="$CXXFLAGS -n32"
	   LDFLAGS="$LDFLAGS -n32"
       fi
    fi
    if test -z "$GNU_CXX"; then
      MIPSPRO_CXX=1
    fi
    ;;

*-*linux*)
    DEBUG_FLAGS="-g -fno-inline"  # most people on linux use gcc/gdb,
                                  # and that combo is not yet good at
                                  # debugging inlined functions (even
                                  # when using DWARF2 as the debugging
                                  # format)    
    case "${target_cpu}" in
    alpha*)
    	CFLAGS="$CFLAGS -mieee"
    	CXXFLAGS="$CXXFLAGS -mieee"
    ;;
    i*86)
    	USE_ELF_DYNSTR_GC=1
    ;;
    mips*)
        CFLAGS="$CFLAGS -Wa,-xgot"
        CXXFLAGS="$CXXFLAGS -Wa,-xgot"
    ;;
    esac
    ;;
*-mingw*|*-cygwin*|*-msvc*|*-mks*)
    DSO_CFLAGS=
    DSO_PIC_CFLAGS=
    DLL_SUFFIX=.dll
    # certain versions of cygwin's makedepend barf on the 
    # #include <string> vs -I./dist/include/string issue so don't use it
    SYSTEM_MAKEDEPEND=
    if test -n "$GNU_CC"; then
        CC="$CC -mno-cygwin"
        CXX="$CXX -mno-cygwin"
        CPP="$CPP -mno-cygwin"
        CFLAGS="$CFLAGS -mms-bitfields"
        CXXFLAGS="$CXXFLAGS -mms-bitfields"
        DSO_LDOPTS='-shared'
        MKSHLIB='$(CXX) $(DSO_LDOPTS) -o $@'
        MKCSHLIB='$(CC) $(DSO_LDOPTS) -o $@'
        DLL_PREFIX=
        IMPORT_LIB_SUFFIX=dll.a
    else
	CCOFLAG=-Fo
	LDOFLAG=/Out:
        HOST_CC='$(CC)'
        HOST_CXX='$(CXX)'
        HOST_LD='$(LD)'
        AR='lib -NOLOGO -OUT:"$@"'
        AR_FLAGS=
        RANLIB='echo not_ranlib'
        STRIP='echo not_strip'
        XARGS=xargs
        ZIP=zip
        UNZIP=unzip
        DOXYGEN=:
        GARBAGE='$(OBJDIR)/vc20.pdb $(OBJDIR)/vc40.pdb'
        OBJ_SUFFIX=obj
        LIB_SUFFIX=lib
        DLL_PREFIX=
        LIB_PREFIX=
        IMPORT_LIB_SUFFIX=lib
        MKSHLIB='$(LD) /IGNORE:4217 /IGNORE:4049 /IGNORE:4089 /NOLOGO /DEBUG /DLL /DEF:$(patsubst %.dll,%.def,$@) /OUT:$@ $(DSO_LDOPTS)'
	MKEXECUTABLE='$(LD) /IGNORE:4217 /IGNORE:4049 /IGNORE:4089 /NOLOGO /OUT:$@ $(DSO_LDOPTS)'
        MKCSHLIB='$(LD) /NOLOGO /DLL /OUT:$@ $(DSO_LDOPTS)'
        MKSHLIB_FORCE_ALL=
        MKSHLIB_UNFORCE_ALL=
        DSO_LDOPTS=/SUBSYSTEM:WINDOWS
        CFLAGS="$CFLAGS -W3 -nologo -Gy"
        CXXFLAGS="$CXXFLAGS -W3 -nologo -Gy -GX"
	MISC_CXXFLAGS="$CXXFLAGS"
        LIBS="$LIBS kernel32.lib user32.lib gdi32.lib winmm.lib wsock32.lib advapi32.lib"
    fi
    AC_DEFINE(NEW_H, <new>, [New header])
    TARGET_MD_ARCH=win32
    _PLATFORM_DEFAULT_TOOLKIT='windows'
    BIN_SUFFIX='.exe'
    USE_SHORT_LIBNAME=1

    case "$host" in
    *-mingw*|*-cygwin*|*-msvc*|*-mks*)

    ;;
    esac 

    case "$target" in
    i*86-*)
	PLATFORM_DEFINE="$PLATFORM_DEFINE -D__x86__"
	;;
    alpha-*)
	PLATFORM_DEFINE="$PLATFORM_DEFINE -D__alpha__"
	;;
    mips-*)
	PLATFORM_DEFINE="$PLATFORM_DEFINE -D__mips__"
	;;
    *)
	;;
    esac
    ;;

*-netbsd*)
    DSO_CFLAGS=''
    CFLAGS="$CFLAGS -Dunix"
    CXXFLAGS="$CXXFLAGS -Dunix"
    if $CC -E - -dM </dev/null | grep __ELF__ >/dev/null; then
        DLL_SUFFIX=".so"
        DSO_PIC_CFLAGS='-fPIC -DPIC'
        DSO_LDOPTS='-shared -Wl,-soname,lib$(LIBRARY_NAME)$(DLL_SUFFIX)'
	BIN_FLAGS='-Wl,--export-dynamic'
    else
    	DSO_PIC_CFLAGS='-fPIC -DPIC'
    	DLL_SUFFIX=".so.1.0"
    	DSO_LDOPTS='-shared'
    fi
    # This will fail on a.out systems prior to 1.5.1_ALPHA.
    MKSHLIB_FORCE_ALL='-Wl,--whole-archive'
    MKSHLIB_UNFORCE_ALL='-Wl,--no-whole-archive'
    if test "$LIBRUNPATH"; then
	DSO_LDOPTS="-Wl,-R$LIBRUNPATH $DSO_LDOPTS"
    fi
    ;;

*-nto*) 
	OS_TARGET=NTO
	USE_PTHREADS=1
	_PEDANTIC=
	LIBS="$LIBS -lsocket -lstdc++"
	_DEFINES_CFLAGS='-D_POSIX_C_SOURCE=199506'
	_DEFINES_CXXFLAGS='-D_POSIX_C_SOURCE=199506'
	if test "$with_x" != "yes"
	then
		_PLATFORM_DEFAULT_TOOLKIT="photon"
	    TK_CFLAGS='-I/usr/include/photon'
		TK_LIBS='-lph'
	fi
	case "${target_cpu}" in
	ppc*)
	;;
	esac
	case "${host_cpu}" in
	i*86)
	USE_ELF_DYNSTR_GC=1
	;;
	esac
	;;

*-openbsd*)
    DLL_SUFFIX=".so.1.0"
    DSO_CFLAGS=''
    DSO_PIC_CFLAGS='-fPIC'
    DSO_LDOPTS='-shared -fPIC'
    if test "$LIBRUNPATH"; then
	DSO_LDOPTS="-R$LIBRUNPATH $DSO_LDOPTS"
    fi
    ;;

*-openvms*) 
    USE_PTHREADS=1
    MKSHLIB_FORCE_ALL='-all'
    MKSHLIB_UNFORCE_ALL='-none'
    AS='as'
    AR_FLAGS='c $@'
    DSO_LDOPTS='-shared -auto_symvec'
    DSO_PIC_CFLAGS=
    COMPAQ_CXX=1
    CC_VERSION=`$CC -V 2>&1 | awk '/ C / { print $3 }'`
    CXX_VERSION=`$CXX -V 2>&1 | awk '/ C\+\+ / { print $3 }'`
    ;;


*-os2*)
    USE_SHORT_LIBNAME=1
    DLL_PREFIX=
    LIB_PREFIX=
    LIB_SUFFIX=lib
    BIN_SUFFIX=".exe"
    DLL_SUFFIX=".dll"
    IMPORT_LIB_SUFFIX=lib
    DSO_PIC_CFLAGS=
    TARGET_MD_ARCH=os2
    _PLATFORM_DEFAULT_TOOLKIT=os2
    RCFLAGS='-n'

    # EMX/GCC build
    if test -n "$GNU_CC"; then
        AR=emxomfar
        AR_FLAGS='r $@'
        CFLAGS="$CFLAGS -Zomf"
        CXXFLAGS="$CXXFLAGS -Zomf"
        DSO_LDOPTS='-Zdll'
        BIN_FLAGS='-Zlinker /ST:0x100000'
        IMPLIB='emximp -o'
        FILTER='emxexp -o'
        LDFLAGS='-Zmap'
        DEBUG_FLAGS="-g -fno-inline"
        OPTIMIZE_FLAGS="-O2 -s"
        OPTIMIZE_LDFLAGS="-Zlinker /EXEPACK:2 -Zlinker /PACKCODE -Zlinker /PACKDATA"

        # GCC for OS/2 currently predefines these, but we don't want them
        _DEFINES_CFLAGS="$_DEFINES_CFLAGS -Uunix -U__unix -U__unix__"
        _DEFINES_CXXFLAGS="$_DEFINES_CXXFLAGS -Uunix -U__unix -U__unix__"

    # Visual Age C++ build
    elif test "$VACPP" = "yes"; then
        OBJ_SUFFIX=obj
        AR=-ilib
        AR_FLAGS='/NOL /NOI /O:$(subst /,\\,$@)'
        AR_LIST='/L'
        AR_EXTRACT='-*'
        AR_DELETE='-'
        AS=alp
        ASFLAGS='-Mb'
        ASM_SUFFIX=asm
        LD='-ilink'
        CFLAGS="/Q /qlibansi /Gm+ /Su4 /Mp /Tl9"
        CXXFLAGS="/Q /qlibansi /Gm+ /Su4 /Mp /Tl9 /Gx+"
        DEBUG_FLAGS="/Ti+"
        OPTIMIZE_FLAGS="/O+ /Gl+ /G5 /qarch=pentium"
        LDFLAGS="/NOL /M"
        DEBUG_LDFLAGS="/DE"
        OPTIMIZE_LDFLAGS="/OPTFUNC /EXEPACK:2 /PACKCODE /PACKDATA"
        DSO_LDOPTS=''
        DSO_PIC_CFLAGS=
        IMPLIB='implib /NOL /NOI'
        FILTER='cppfilt -q -B -P'
        MKSHLIB='$(LD) $(DSO_LDOPTS)'
        MKCSHLIB='$(LD) $(DSO_LDOPTS)'
    fi
    ;;

alpha*-*-osf*)
    if test "$GNU_CC"; then
	DSO_LDOPTS='-shared -Wl,-soname -Wl,$@'
    else
	DEBUG_FLAGS='-g'
	ASFLAGS='-I$(topsrcdir)/xpcom/reflect/xptcall/public -g'
	CFLAGS="$CFLAGS -ieee"
	CXXFLAGS="$CXXFLAGS "'-noexceptions -ieee  -ptr $(DIST)/cxx_repository'
	DSO_LDOPTS='-shared -msym -expect_unresolved \* -soname $@ -update_registry $(DIST)/so_locations'
	DSO_CFLAGS=
	DSO_PIC_CFLAGS=
	MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -o $@'
	MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -o $@'
	MKSHLIB_FORCE_ALL='-all'
	MKSHLIB_UNFORCE_ALL='-none'
	dnl Might fix the libxpcom.so breakage on this platform as well....
    fi
    if test -z "$GNU_CXX"; then
      COMPAQ_CXX=1
    fi
    ;;

*-qnx*) 
    DIRENT_INO=d_stat.st_ino
    dnl Solves the problems the QNX compiler has with nsCOMPtr.h.
    dnl Explicit set STDC_HEADERS to workaround QNX 6.0's failing of std test
    if test "$no_x" = "yes"; then
	    _PLATFORM_DEFAULT_TOOLKIT='photon'
	    TK_CFLAGS='-I/usr/nto/include/photon'
	    TK_LIBS='-lphoton -lphrender'
    fi
    ;;

*-sco*) 
    CXXFLAGS="$CXXFLAGS -I/usr/include/CC"
    if test ! "$GNU_CC"; then
       DSO_LDOPTS='-G -h $@'
    fi
    ;;

dnl the qsort routine under solaris is faulty
*-solaris*) 
    TARGET_NSPR_MDCPUCFG='\"md/_solaris32.cfg\"'
    SYSTEM_MAKEDEPEND=
    if test -z "$GNU_CC"; then
       NS_USE_NATIVE=1
       CFLAGS="$CFLAGS -xstrconst -xbuiltin=%all"
       CXXFLAGS="$CXXFLAGS -xbuiltin=%all -features=tmplife"
       LDFLAGS="-xildoff -zlazyload -zcombreloc $LDFLAGS"
       OPTIMIZE_FLAGS="-xO4"
       MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_PIC_FLAGS) $(DSO_LDOPTS) -o $@'
       MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_FLAGS) -G -Wl,-z -Wl,muldefs -o $@'
       MKSHLIB_FORCE_ALL='-Qoption ld -z,allextract'
       MKSHLIB_UNFORCE_ALL=''
       DSO_LDOPTS='-G -Qoption ld -z,muldefs -h $@'
       AR_LIST="$AR t"
       AR_EXTRACT="$AR x"
       AR_DELETE="$AR d"
       AR='$(CXX) -xar'
       AR_FLAGS='-o $@'
       AS='/usr/ccs/bin/as'
       ASFLAGS="$ASFLAGS -K PIC -L -P -D_ASM -D__STDC__=0"
        CC_VERSION=`$CC -V 2>&1 | grep '^cc:' 2>/dev/null | $AWK -F\: '{ print $2 }'`
        CXX_VERSION=`$CXX -V 2>&1 | grep '^CC:' 2>/dev/null | $AWK -F\: '{ print $2 }'`
       AC_MSG_CHECKING([for Forte compiler version >= WS6U2])
       AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#if (__SUNPRO_C < 0x530)
           #error "Denied"
           #endif]], [[]])],
           _BAD_COMPILER=,_BAD_COMPILER=1)
        if test -n "$_BAD_COMPILER"; then
            _res="no"
            AC_MSG_ERROR([Forte version WS6U2 or higher is required to build. Your compiler version is $CC_VERSION .])
        else
            _res="yes"
        fi
        AC_MSG_RESULT([$_res])
    else
       ASFLAGS="$ASFLAGS -fPIC"
       DSO_LDOPTS='-G -h $@'
       _WARNINGS_CFLAGS=''
       _WARNINGS_CXXFLAGS=''
    fi
    ;;

*-sunos*) 
    DSO_LDOPTS='-Bdynamic'
    MKSHLIB='-$(LD) $(DSO_LDOPTS) -o $@'
    MKCSHLIB='-$(LD) $(DSO_LDOPTS) -o $@'
    case "$(target_os)" in
    sunos4.1*)
        DLL_SUFFIX='.so.1.0'
        ;;
    esac
    ;;

*-sysv4.2uw7*) 
	NSPR_LIBS="-lnspr$NSPR_VERSION -lplc$NSPR_VERSION -lplds$NSPR_VERSION -L/usr/ccs/lib -lcrt"
    ;;

*-os2*)
    HOST_NSPR_MDCPUCFG='\"md/_os2.cfg\"'
    ;;

esac

# Checks for header files.
AC_CHECK_HEADERS([wchar.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T

# Checks for library functions.

# Try to find Mozilla...
AC_ARG_WITH(
	    mozilla,
            [  --with-mozilla=/path/to/mozilla/dist The path to the Mozilla dist directory(default /usr/local/lib/mozilla)],
	    MOZILLA_DIST_DIR=$with_mozilla,
	    MOZILLA_DIST_DIR="/usr/local/lib/mozilla"
	   )

AC_MSG_CHECKING([for your Mozilla dist directory])
if ! test -d $MOZILLA_DIST_DIR; then
   AC_MSG_RESULT([not found])
   AC_MSG_ERROR([Mozilla distribution directory $MOZILLA_DIST_DIR not found. Try --with-mozilla=/path/to/mozilla/dist])
fi
if ! test -f $MOZILLA_DIST_DIR/bin/xpidl && ! test -f $MOZILLA_DIST_DIR/bin/xpidl.exe; then
   AC_MSG_RESULT([invalid])
   AC_MSG_ERROR([The Mozilla distribution $MOZILLA_DIST_DIR directory did not contain bin/xpidl or bin/xpidl.exe. Check you gave the right directory.])
fi
AC_MSG_RESULT([yes])

# Try to find omniORB4...
AC_ARG_WITH(
	    omniORB,
	    [  --with-omniORB=/path/to/omniORB The path to where omniORB is installed(default /usr)],
	    OMNIORB_DIR=$with_omniORB,
	    OMNIORB_DIR="/usr"
	   )

AC_MSG_CHECKING([for your omniORB install directory])
if ! test -d $OMNIORB_DIR; then
   AC_MSG_RESULT([not found])
   AC_MSG_ERROR([omniORB installation directory $OMNIORB_DIR not found. Try --with-omniORB=/path/to/omniORB/install])
fi
if ! test -f $OMNIORB_DIR/include/omniORB4/omniORB.h; then
   AC_MSG_RESULT([invalid])
   AC_MSG_ERROR([The omniORB directory $OMNIORB_DIR did not contain include/omniORB4/omniORB.h. Give the path to omniORB4 with --with-omniORB=/path/to/omniORB/install])
fi
AC_MSG_RESULT([yes])

# Try to find xpcorba...
AC_ARG_WITH(
	    xpcorba,
	    [  --with-xpcorba=/path/to/xpcorba The path to where omniORB is installed(default /usr)],
	    XPCORBA_DIR=$with_xpcorba,
	    XPCORBA_DIR="/usr"
	   )

AC_MSG_CHECKING([for your xpcorba install directory])
if ! test -d $XPCORBA_DIR; then
   AC_MSG_RESULT([not found])
   AC_MSG_ERROR([XPCORBA directory $XPCORBA_DIR not found. Try --with-xpcorba=/path/to/xpcorba])
fi
if ! test -f $XPCORBA_DIR/xpidls/Ixpcom.idl; then
   AC_MSG_RESULT([invalid])
   AC_MSG_ERROR([The XPCORBA directory $XPCORBA_DIR did not contain xpidls/Ixpcom.idl . Give the path to XPCORBA with --with-xpcorba=/path/to/xpcorba])
fi
AC_MSG_RESULT([yes])

AC_ARG_WITH(
	    cmgui_corba_bridge,
	    [  --with-cmgui-corba-bridge=/path/to/cmgui_corba_bridge The cmgui_corba_bridge directory],
	    CMGUI_CORBA_BRIDGE_DIR=$with_cmgui_corba_bridge,
	    CMGUI_CORBA_BRIDGE_DIR="$CMISS_ROOT/cmgui_corba_bridge"
	   )

AC_ARG_WITH(gccdist, [  --with-gccdist=/path/to/gccdist  Package up a mini gcc/binutils distribution in the XPI[default=no]],
            package_gcc=$with_gccdist, package_gcc="no")

AC_ARG_WITH(gredist, [  --with-gredist=/path/to/gccdist  Extract GRE components for standalone builds from an alternate source[default=mozilla_libdir]],
            package_gre=$with_gredist, package_gre="no")

AC_MSG_CHECKING([if we should package gcc in the XPI])
if test ! "$package_gcc" = "no" ; then
        AC_MSG_RESULT([Yes, from $package_gcc])
        GCC_BINARY_PATH=$package_gcc
else
        AC_MSG_RESULT([No])
        GCC_BINARY_PATH=
fi

AC_MSG_CHECKING([where to take GRE components from])
if test ! "$package_gre" = "no" ; then
        AC_MSG_RESULT([$package_gre])
        GRE_LIBDIR=$package_gre
else
        AC_MSG_RESULT([$mozilla_libdir])
        GRE_LIBDIR=$mozilla_libdir
fi

case "$target" in
*-cygwin*|*-mingw*|*-msvc*|*-mks*)
    XPCORBA_LIBS="xpcom omniORB406_rt omniDynamic406_rt xpcorba omnithread31_rt ws2_32 advapi32"
    LINK_LIBS="/LIBPATH:$OMNIORB_DIR/lib/x86_win32 /LIBPATH:$XPCORBA_DIR /LIBPATH:$MOZILLA_DIST_DIR/lib \$(foreach lib,\$(LINK_IN_LIBS),'\$(lib).lib') /NODEFAULTLIB:LIBCMT /NODEFAULTLIB:LIBC /DEFAULTLIB:MSVCRT"
    XPCOM_LIBPATH="$XPCOM_DIR"
    GENERATE_DEFS="`pwd`/win32_export_all \$@ \$^; "
    WEAKREF_CODE=
    ;;
*)
    XPCORBA_LIBS="omniORB4 omnithread xpcom xpcorba"
    OMNIORB_LIBPATH="$OMNIORB_DIR/lib"
    LINK_LIBS="-L$OMNIORB_LIBPATH -L$MOZILLA_DIST_DIR/lib -L$XPCORBA_DIR \$(foreach lib,\$(LINK_IN_LIBS),-l'\$(lib)')"
    GENERATE_DEFS=
    WEAKREF_CODE=nsWeakReference.o
    ;;
esac
MKSHLIB=$GENERATE_DEFS$MKSHLIB

IDLC=$(find $OMNIORB_DIR/bin -name omniidl$BIN_SUFFIX)
IDLCPP=$(find $OMNIORB_DIR/bin -name omnicpp$BIN_SUFFIX)
if test -z $IDLCPP; then
  IDLCPP="$IDLC -E"
fi

DEFS=

AC_SUBST(MISC_CXXFLAGS)
AC_SUBST(CCOFLAG)
AC_SUBST(OMNIORB_DIR)
AC_SUBST(XPCORBA_DIR)
AC_SUBST(MOZILLA_DIST_DIR)
AC_SUBST(AR)
AC_SUBST(AR_FLAGS)
AC_SUBST(AR_LIST)
AC_SUBST(AR_EXTRACT)
AC_SUBST(AR_DELETE)
AC_SUBST(LD)
AC_SUBST(BIN_FLAGS)
AC_SUBST(BUILD_SHARED_LIBS)
AC_SUBST(BUILD_STATIC_LIBS)
AC_SUBST(USE_ELF_DYNSTR_GC)
AC_SUBST(INCREMENTAL_LINKER)
AC_SUBST(CYGWIN_WRAPPER)
AC_SUBST(DLL_PREFIX)
AC_SUBST(LIB_PREFIX)
AC_SUBST(DLL_SUFFIX)
AC_SUBST(LIB_SUFFIX)
AC_SUBST(OBJ_SUFFIX)
AC_SUBST(BIN_SUFFIX)
AC_SUBST(MKSHLIB)
AC_SUBST(PLATFORM_DEFINE)
AC_SUBST(LINK_LIBS)
AC_SUBST(XPCORBA_LIBS)
AC_SUBST(MKEXECUTABLE)
AC_SUBST(IDLC)
AC_SUBST(IDLCPP)
AC_SUBST(WEAKREF_CODE)
AC_SUBST(LDOFLAG)
AC_SUBST(GCC_BINARY_PATH)
AC_SUBST(CMGUI_CORBA_BRIDGE_DIR)

AC_CONFIG_FILES([Makefile
        MakeMiniGRE.sh
        build.sh
        components/Makefile
        components/mozCellML/Makefile
        components/mozCellML/base/Makefile
        components/mozCellML/base/public/Makefile
        components/mozCellML/base/src/Makefile
        components/mozCellML/build/Makefile
        components/mozCellML/build/src/Makefile
        components/mozCellML/tests/Makefile
        install/install.js
        ])
AC_OUTPUT
